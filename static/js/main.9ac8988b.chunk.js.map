{"version":3,"sources":["components/Coin/Coin.jsx","components/CoinList/CoinList.jsx","components/AccountBalance/AccountBalance.jsx","components/ExchangeHeader/logo.svg","components/ExchangeHeader/ExchangeHeader.jsx","App.js","serviceWorker.js","index.js"],"names":["Td","styled","td","TdActions","TdName","Button","button","Coin","props","name","ticker","price","showBalance","balance","action","method","className","onClick","event","preventDefault","handleRefresh","tickerId","handleTransaction","Table","table","CoinList","coinData","map","key","Section","section","Balance","div","BalanceButton","formatter","Intl","NumberFormat","style","currency","AccountBalance","buttonText","content","format","amount","buttonClass","handleBalanceVisibilityChange","handleMoneyAdd","Img","img","Header","header","H1","h1","ExchangeHeader","src","logo","alt","Component","Div","formatPrice","parseFloat","Number","toFixed","App","useState","setBalance","setShowBalance","setCoinData","componentDidMount","a","axios","get","response","coinIds","data","slice","coin","id","promises","Promise","all","coinPriceData","symbol","quotes","USD","useEffect","length","valueChangeId","tickerUrl","newPrice","newCoinData","values","newValues","oldBalance","oldValue","isBuy","balanceChange","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9ac8988b.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nconst Td = styled.td`    \n    border: 1px solid #cccccc;\n    width: 8vw;\n`;\n\nconst TdActions = styled(Td)`\n    width: 24vw;\n`;\n\nconst TdName = styled(Td)`\n    width: 12vw;\n`;\n\nconst Button = styled.button`\n    font-size: 11px;\n    width: 78px;\n    margin: 3px 5px 5px 0;\n\n`;\n\nexport default function Coin(props) {\n \n    const handleClick = (event) => {\n        // Prevent the default action of submitting the form \n        event.preventDefault();\n\n        props.handleRefresh(props.tickerId); \n    }\n\n    const handleBuy = (event) => {\n        // Prevent the default action of submitting the form \n        event.preventDefault();\n\n        props.handleTransaction(true, props.tickerId); \n    }\n\n    const handleSell = (event) => {\n        // Prevent the default action of submitting the form \n        event.preventDefault();\n\n        props.handleTransaction(false, props.tickerId); \n    }\n    \n    return (\n        <tr> \n            <TdName>{props.name}</TdName>\n            <Td>{props.ticker}</Td> \n            <Td>${props.price}</Td>\n            <Td>{props.showBalance ? props.balance : '-'}</Td> \n            <TdActions>\n                <form action=\"#\" method=\"POST\">\n                <Button className={'btn btn-secondary'} onClick={handleClick}>Refresh</Button>\n                <Button className={'btn btn-success'} onClick={handleBuy}>Buy</Button>\n                <Button className={'btn btn-danger'} onClick={handleSell}>Sell</Button>\n                </form>\n            </TdActions>\n        </tr>\n        );\n\n}\n\nCoin.propTypes = {\n    name: PropTypes.string.isRequired,\n    ticker: PropTypes.string.isRequired,\n    price: PropTypes.number.isRequired\n}","import React from 'react';\nimport Coin from '../Coin/Coin';\nimport styled from 'styled-components';\n\nconst Table = styled.table`\n      font-size: 1rem;\n`;\n\nexport default function CoinList(props) {\n  return (\n      <Table className=\"table table-primary table-bordered\">\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Ticker</th>\n          <th>Price</th>\n          <th>Balance</th>\n          <th>Actions</th>\n        </tr>\n      </thead>\n      <tbody>\n        {\n          props.coinData.map( ({key, name, ticker, price, balance}) => \n            <Coin key={key} \n                  handleRefresh={props.handleRefresh} \n                  handleTransaction={props.handleTransaction}\n                  name={name} \n                  ticker={ticker} \n                  showBalance={props.showBalance}\n                  balance={balance}\n                  price={price} \n                  tickerId={key} /> \n          )\n        }                              \n      </tbody>\n    </Table>\n  )\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nconst Section = styled.section`\n    font-size: 2rem;\n    text-align: center;\n    margin-bottom: 2rem;\n    line-height: 3rem;\n    display: inlice-block;\n`;\n\nconst Balance = styled.div`\n    min-width: 250px;\n    margin: 0.5rem 0 0 2.5rem;\n    font-size:1.5em;\n    vertical-align:middle;\n`;\n\nconst Button = styled.button`\n    margin: 0 8px;\n`;\n\nconst BalanceButton = styled(Button)`\n    width: 150px;\n`; \n\nvar formatter = Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD'\n});\n\n\nexport default function AccountBalance(props) {\n\n    const buttonText = props.showBalance ? 'Hide Balance' : 'Show Balance';\n    let content = '\\u00A0';\n    if (props.showBalance) {\n        content = <>{ formatter.format(props.amount) } </>\n    }\n    const buttonClass = 'btn ' + (props.showBalance ? 'btn-danger' : 'btn-success');\n\n    return (\n        <>\n            <Balance>{content}</Balance>\n            <Section>            \n                <BalanceButton onClick={props.handleBalanceVisibilityChange} className={buttonClass}>{buttonText}</BalanceButton>\n                <Button className=\"btn btn-warning\" onClick={props.handleMoneyAdd}><i className=\"fas fa-wallet\"></i></Button>\n            </Section>\n        </>\n    );\n\n}\n\n\nAccountBalance.propTypes = {\n    amount: PropTypes.number.isRequired\n}","export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport styled from 'styled-components';\n\nconst Img = styled.img`\n    height: 9rem;\n    pointer-events: none;\n`;\n\nconst Header = styled.header`\n    background-color: #282c4e;\n    min-height: 10vh;\n    width: 100%;\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    justify-content: flex-start;\n    color: white;\n`;\n\nconst H1 = styled.h1`\n    font-size: 3rem; \n    line-height: 9rem;\n    font-weight: bold;\n    min-width: 300px; \n`;\n\nexport default class ExchangeHeader extends Component {\n    render() {\n        return (\n            <Header>\n                <Img src={logo} alt=\"React logo\" />\n                <H1>\n                    Coin Exchange\n                </H1>\n          </Header>\n        )\n    }\n}\n","import React, {useState, useEffect} from 'react';\nimport CoinList from './components/CoinList/CoinList';\nimport AccountBalance from './components/AccountBalance/AccountBalance';\nimport ExchangeHeader from './components/ExchangeHeader/ExchangeHeader';\nimport styled from 'styled-components';\nimport axios from 'axios';\n\nimport 'bootswatch/dist/darkly/bootstrap.min.css';\nimport '@fortawesome/fontawesome-free/js/all';\n\nconst Div = styled.div`\n  text-align: center;\n  background-color: rgb(20, 56, 97);\n  color: #ffffff;\n`;\n\nconst COIN_COUNT = 10;\nconst formatPrice = price => parseFloat(Number(price).toFixed(4));\n\nfunction App(props) {\n  const [balance, setBalance] = useState(7500);\n  const [showBalance, setShowBalance] = useState(false);\n  const [coinData, setCoinData] = useState([]);\n\n  const componentDidMount = async () => {\n    const response = await axios.get('https://api.coinpaprika.com/v1/coins');\n    const coinIds = response.data.slice(0, COIN_COUNT).map(coin => coin.id);\n    const tickerUrl = 'https://api.coinpaprika.com/v1/tickers/';\n    const promises = coinIds.map(id => axios.get(tickerUrl + id));\n    const coinData = await Promise.all(promises);\n    const coinPriceData = coinData.map(function(response) { \n      const coin = response.data;\n      return {\n        key: coin.id,\n        name: coin.name,\n        ticker: coin.symbol,\n        balance: 0,\n        price: formatPrice(coin.quotes.USD.price),\n      };\n    });\n    setCoinData(coinPriceData);\n  }  \n\n  useEffect(function() {\n    if (coinData.length === 0 ) {\n      componentDidMount();\n    }\n  });\n\n  const handleMoneyAdd = () => {\n    setBalance( oldBalance => oldBalance + 1000 );   \n  }\n\n  const handleTransaction = (isBuy, valueChangeId) => {\n    var balanceChange = isBuy ? 1 : -1;\n    const newCoinData = coinData.map( function(values) {\n      let newValues = {...values};\n      if ( valueChangeId === values.key) {\n        newValues.balance += balanceChange;\n        setBalance( oldBalance => oldBalance - balanceChange * newValues.price);\n      }\n      return newValues;\n    });\n    setCoinData(newCoinData);\n  }\n\n\n  const handleBalanceVisibilityChange = () => {\n    setShowBalance(oldValue => !oldValue);\n  }\n\n  const handleRefresh = async (valueChangeId) => {\n    const tickerUrl = `https://api.coinpaprika.com/v1/tickers/${valueChangeId}`;\n    const response = await axios.get(tickerUrl);\n    const newPrice = formatPrice(response.data.quotes.USD.price);\n    const newCoinData = coinData.map( function( values ) {\n      let newValues = { ...values };\n      if ( valueChangeId === values.key ) {\n        newValues.price = newPrice;\n      }\n      return newValues;\n    });\n    \n    setCoinData(newCoinData);\n  }\n\n  return (\n    <Div>\n      <ExchangeHeader />\n      <AccountBalance \n        amount={balance} \n        showBalance={showBalance} \n        handleMoneyAdd={handleMoneyAdd}\n        handleBalanceVisibilityChange={handleBalanceVisibilityChange} />\n      <CoinList \n        coinData={coinData} \n        showBalance={showBalance}\n        handleTransaction={handleTransaction}\n        handleRefresh={handleRefresh} />\n    </Div>\n  );\n\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}